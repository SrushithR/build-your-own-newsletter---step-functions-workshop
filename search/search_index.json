{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Build your own Newsletter using Step Functions Workshop Execution Steps: In this hands-on workshop, participants will learn how to design, build, and manage a fully automated newsletter system using AWS Step Functions. By the end of the workshop, attendees will have the skills to create sophisticated workflows that can handle complex business logic, scale efficiently, and integrate directly with other AWS services. Outline: Introduction to AWS Step Functions Overview of AWS Step Functions and their importance in orchestrating microservices. Key concepts: states, transitions, and the state machine. Designing your first simple workflow. Understanding Standard vs. Express Workflows Input and Output Processing How to manage input and output data within your workflows. Using JSONPath to extract, transform, and pass data between states. Best practices for managing large payloads and ensuring data integrity. Direct Integration with AWS Services Learn how to leverage Step Functions' direct integration with AWS services, focusing on sending emails via Amazon Simple Email Service (SES). Explore different ways to trigger email notifications within your workflow. Scaling with the Map State Leveraging the Map state to process large datasets in parallel. Real-world scenarios where the Map state can optimize your workflows. Hands-on example: processing and sending personalized emails to a large subscriber list. Implementing the Callback Pattern Using the callback pattern to pause and resume workflows. Handling asynchronous tasks by integrating with external systems or human intervention. Hands-on example: introducing manual approval step in the newsletter workflow. Mastering Built-in Retry Mechanisms Understanding AWS Step Functions' built-in retry and error handling capabilities. Designing robust workflows that can handle failures gracefully. Practical examples to demonstrate retry logic and error handling. [Bonus] Scheduling Notifications with EventBridge Integrating EventBridge with Step Functions to schedule and automate your newsletter sends. Setting up cron jobs and event rules to trigger workflows at specific times. Best practices for managing scheduled events and ensuring timely delivery. Prerequisites: Basic understanding of AWS services (IAM, S3, Lambda, SES). Familiarity with JSON and the AWS Management Console. AWS account with permissions to use Step Functions, EventBridge, SES, and Lambda.","title":"Home"},{"location":"#build-your-own-newsletter-using-step-functions","text":"","title":"Build your own Newsletter using Step Functions"},{"location":"#workshop-execution-steps","text":"In this hands-on workshop, participants will learn how to design, build, and manage a fully automated newsletter system using AWS Step Functions. By the end of the workshop, attendees will have the skills to create sophisticated workflows that can handle complex business logic, scale efficiently, and integrate directly with other AWS services.","title":"Workshop Execution Steps:"},{"location":"#outline","text":"","title":"Outline:"},{"location":"#introduction-to-aws-step-functions","text":"Overview of AWS Step Functions and their importance in orchestrating microservices. Key concepts: states, transitions, and the state machine. Designing your first simple workflow. Understanding Standard vs. Express Workflows","title":"Introduction to AWS Step Functions"},{"location":"#input-and-output-processing","text":"How to manage input and output data within your workflows. Using JSONPath to extract, transform, and pass data between states. Best practices for managing large payloads and ensuring data integrity.","title":"Input and Output Processing"},{"location":"#direct-integration-with-aws-services","text":"Learn how to leverage Step Functions' direct integration with AWS services, focusing on sending emails via Amazon Simple Email Service (SES). Explore different ways to trigger email notifications within your workflow.","title":"Direct Integration with AWS Services"},{"location":"#scaling-with-the-map-state","text":"Leveraging the Map state to process large datasets in parallel. Real-world scenarios where the Map state can optimize your workflows. Hands-on example: processing and sending personalized emails to a large subscriber list.","title":"Scaling with the Map State"},{"location":"#implementing-the-callback-pattern","text":"Using the callback pattern to pause and resume workflows. Handling asynchronous tasks by integrating with external systems or human intervention. Hands-on example: introducing manual approval step in the newsletter workflow.","title":"Implementing the Callback Pattern"},{"location":"#mastering-built-in-retry-mechanisms","text":"Understanding AWS Step Functions' built-in retry and error handling capabilities. Designing robust workflows that can handle failures gracefully. Practical examples to demonstrate retry logic and error handling.","title":"Mastering Built-in Retry Mechanisms"},{"location":"#bonus-scheduling-notifications-with-eventbridge","text":"Integrating EventBridge with Step Functions to schedule and automate your newsletter sends. Setting up cron jobs and event rules to trigger workflows at specific times. Best practices for managing scheduled events and ensuring timely delivery. Prerequisites: Basic understanding of AWS services (IAM, S3, Lambda, SES). Familiarity with JSON and the AWS Management Console. AWS account with permissions to use Step Functions, EventBridge, SES, and Lambda.","title":"[Bonus] Scheduling Notifications with EventBridge"},{"location":"io/","text":"Understanding Input and Output Processing in AWS Step Functions In AWS Step Functions, managing the flow of data between states is critical to ensure each task (or step) receives and returns the correct information. AWS provides various features to manipulate the data flow: - InputPath - Parameters - ResultSelector - ResultPath - OutputPath This workshop will walk you through these concepts and explain how they work in real-world scenarios. For a more detailed guide, refer to the official AWS documentation on data flow in Step Functions: AWS Step Functions Data Flow Simulator . 1. InputPath \u2013 What input does a task need? Definition: The InputPath field specifies which part of the input to pass to the task. If your input payload is complex or contains unnecessary information, you can use InputPath to extract only the relevant portion that the task needs. Example: Consider the following input payload: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" } } If you want to pass only the pizzaOrder section to the next state, you would use: \"InputPath\": \"$.pizzaOrder\" This results in the following input to the next task: { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" } 2. Parameters \u2013 How does the task need the structure of the input to be? Definition: The Parameters field allows you to specify how the input should look before it is passed to the task. You can use this to build a custom structure for your input, combining dynamic values (from the input or workflow context) with static values. Example: Let\u2019s say you need to pass only the pizza type and size, and you want to add a static orderID field. You can define the input structure using Parameters: \"Parameters\": { \"PizzaType.$\": \"$.pizzaType\", \"Size.$\": \"$.size\", \"OrderID\": \"12345ABC\" // Static value } This transforms the input to: { \"PizzaType\": \"Margherita\", \"Size\": \"Large\", \"OrderID\": \"12345ABC\" } 3. ResultSelector \u2013 What to choose from the task\u2019s output? Definition: The ResultSelector field allows you to select specific values from the output of a task. You can create a new output by defining a set of key-value pairs based on the task\u2019s result. Example: If a task returns the following result after calculating the price: { \"pizzaType\": \"Margherita\", \"priceDetails\": { \"basePrice\": 12.00, \"toppingsPrice\": 3.00, \"totalPrice\": 15.00 } } You can use ResultSelector to extract only the totalPrice and pizzaType: \"ResultSelector\": { \"TotalPrice.$\": \"$.priceDetails.totalPrice\", \"PizzaType.$\": \"$.pizzaType\" } This creates the following output: { \"TotalPrice\": 15.00, \"PizzaType\": \"Margherita\" } 4. ResultPath \u2013 Where to put the chosen output? Definition: The ResultPath field specifies where the task\u2019s output should be placed in the original input. You can either merge the task\u2019s output with the input or replace the input entirely. Example: Consider the following input before invoking a task: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\" } } The task returns the following output: { \"totalPrice\": 15.00 } Using ResultPath, you can merge the task result into the original input: \"ResultPath\": \"$.pizzaOrder.price\" The final output becomes: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } } 5. OutputPath \u2013 What output to send to the next state? Definition: The OutputPath field allows you to filter the final output before passing it to the next state. This helps in removing unnecessary data and sending only the relevant information to the next state. Example: Let\u2019s say the current state produces the following output: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } } If you want to pass only the totalPrice to the next state, you can use: \"OutputPath\": \"$.pizzaOrder.price.totalPrice\" This results in the following output: 15.00","title":"Understanding Input & Output Processing"},{"location":"io/#understanding-input-and-output-processing-in-aws-step-functions","text":"In AWS Step Functions, managing the flow of data between states is critical to ensure each task (or step) receives and returns the correct information. AWS provides various features to manipulate the data flow: - InputPath - Parameters - ResultSelector - ResultPath - OutputPath This workshop will walk you through these concepts and explain how they work in real-world scenarios. For a more detailed guide, refer to the official AWS documentation on data flow in Step Functions: AWS Step Functions Data Flow Simulator .","title":"Understanding Input and Output Processing in AWS Step Functions"},{"location":"io/#1-inputpath-what-input-does-a-task-need","text":"Definition: The InputPath field specifies which part of the input to pass to the task. If your input payload is complex or contains unnecessary information, you can use InputPath to extract only the relevant portion that the task needs. Example: Consider the following input payload: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" } } If you want to pass only the pizzaOrder section to the next state, you would use: \"InputPath\": \"$.pizzaOrder\" This results in the following input to the next task: { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" }","title":"1. InputPath \u2013 What input does a task need?"},{"location":"io/#2-parameters-how-does-the-task-need-the-structure-of-the-input-to-be","text":"Definition: The Parameters field allows you to specify how the input should look before it is passed to the task. You can use this to build a custom structure for your input, combining dynamic values (from the input or workflow context) with static values. Example: Let\u2019s say you need to pass only the pizza type and size, and you want to add a static orderID field. You can define the input structure using Parameters: \"Parameters\": { \"PizzaType.$\": \"$.pizzaType\", \"Size.$\": \"$.size\", \"OrderID\": \"12345ABC\" // Static value } This transforms the input to: { \"PizzaType\": \"Margherita\", \"Size\": \"Large\", \"OrderID\": \"12345ABC\" }","title":"2. Parameters \u2013 How does the task need the structure of the input to be?"},{"location":"io/#3-resultselector-what-to-choose-from-the-tasks-output","text":"Definition: The ResultSelector field allows you to select specific values from the output of a task. You can create a new output by defining a set of key-value pairs based on the task\u2019s result. Example: If a task returns the following result after calculating the price: { \"pizzaType\": \"Margherita\", \"priceDetails\": { \"basePrice\": 12.00, \"toppingsPrice\": 3.00, \"totalPrice\": 15.00 } } You can use ResultSelector to extract only the totalPrice and pizzaType: \"ResultSelector\": { \"TotalPrice.$\": \"$.priceDetails.totalPrice\", \"PizzaType.$\": \"$.pizzaType\" } This creates the following output: { \"TotalPrice\": 15.00, \"PizzaType\": \"Margherita\" }","title":"3. ResultSelector \u2013 What to choose from the task\u2019s output?"},{"location":"io/#4-resultpath-where-to-put-the-chosen-output","text":"Definition: The ResultPath field specifies where the task\u2019s output should be placed in the original input. You can either merge the task\u2019s output with the input or replace the input entirely. Example: Consider the following input before invoking a task: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\" } } The task returns the following output: { \"totalPrice\": 15.00 } Using ResultPath, you can merge the task result into the original input: \"ResultPath\": \"$.pizzaOrder.price\" The final output becomes: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } }","title":"4. ResultPath \u2013 Where to put the chosen output?"},{"location":"io/#5-outputpath-what-output-to-send-to-the-next-state","text":"Definition: The OutputPath field allows you to filter the final output before passing it to the next state. This helps in removing unnecessary data and sending only the relevant information to the next state. Example: Let\u2019s say the current state produces the following output: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } } If you want to pass only the totalPrice to the next state, you can use: \"OutputPath\": \"$.pizzaOrder.price.totalPrice\" This results in the following output: 15.00","title":"5. OutputPath \u2013 What output to send to the next state?"},{"location":"sample-input/","text":"Sample Input Here is a sample input that you can use to test your Step Function's execution { \"subject\": \"Step into the Future of Serverless Automation!\", \"content\": \"<html><head><style>body {font-family: Arial, sans-serif;}h1 {text-align: center;}p {text-align: justify;}</style></head><body><h1>Welcome to the AWS Step Functions Workshop!</h1><p>We're thrilled to have you join us for this exciting workshop on AWS Step Functions. Together, we'll explore the power of serverless workflows and learn how to automate complex tasks with ease.</p><p>Throughout the workshop, you'll gain the skills to:</p><ul><li>Design and implement efficient Step Functions workflows.</li><li>Orchestrate various AWS services seamlessly.</li><li>Master input and output processing for smooth data flow.</li><li>Discover best practices for building and monitoring workflows.</li></ul><p>To enhance your learning experience, we've prepared a GitHub repository containing all the code samples you'll need:</p><p><a href='https://github.com/SrushithR/build-your-own-newsletter-step-functions-workshop'>Build Your Own Newsletter Step Functions Workshop</a></p><p>Feel free to clone or download the repository before the workshop begins. We're excited to dive into the practical applications of Step Functions together!</p><p>We look forward to a productive and engaging workshop! Don't hesitate to ask questions and share your ideas.</p><p>Best regards,</p><p>The AWS Step Functions Workshop Team</p></body></html>\" }","title":"Sample Input"},{"location":"sample-input/#sample-input","text":"Here is a sample input that you can use to test your Step Function's execution { \"subject\": \"Step into the Future of Serverless Automation!\", \"content\": \"<html><head><style>body {font-family: Arial, sans-serif;}h1 {text-align: center;}p {text-align: justify;}</style></head><body><h1>Welcome to the AWS Step Functions Workshop!</h1><p>We're thrilled to have you join us for this exciting workshop on AWS Step Functions. Together, we'll explore the power of serverless workflows and learn how to automate complex tasks with ease.</p><p>Throughout the workshop, you'll gain the skills to:</p><ul><li>Design and implement efficient Step Functions workflows.</li><li>Orchestrate various AWS services seamlessly.</li><li>Master input and output processing for smooth data flow.</li><li>Discover best practices for building and monitoring workflows.</li></ul><p>To enhance your learning experience, we've prepared a GitHub repository containing all the code samples you'll need:</p><p><a href='https://github.com/SrushithR/build-your-own-newsletter-step-functions-workshop'>Build Your Own Newsletter Step Functions Workshop</a></p><p>Feel free to clone or download the repository before the workshop begins. We're excited to dive into the practical applications of Step Functions together!</p><p>We look forward to a productive and engaging workshop! Don't hesitate to ask questions and share your ideas.</p><p>Best regards,</p><p>The AWS Step Functions Workshop Team</p></body></html>\" }","title":"Sample Input"},{"location":"schedule/","text":"","title":"Scheduling Your Step Function"},{"location":"step1/","text":"Step Function Workshop: Step 1 creating a basic workflow to send email. 1. Create the IAM Role with Permissions and Trust Policy Navigate to the IAM service in the AWS Management Console. Click on Roles in the left-hand menu, then click Create role . Add a custom trust policy that allows Lambda to assume this role add it from here Add a role from copy from here Name the role (e.g., LambdaSendEmailRole ) and finish creating the role. 1. Create the send_email Lambda function Open the AWS Management Console and navigate to the Lambda service. Click Create function and choose the Author from scratch option. Name the function send_email . Select a runtime, such as Python 3.12 . Under Permissions , create or choose an existing execution role that grants the Lambda function access to send emails (SES or a similar service). In the code editor, write a function that sends an email copy it from here . Click Deploy after writing the code. 2. Verify Email in Amazon SES Navigate to the Amazon SES service in the AWS Management Console. In the left-hand menu, select Email Addresses . Click Verify a New Email Address and enter the email address from which you'll be sending emails. Click Verify This Email Address . An email will be sent to that address. Open the email and click the verification link to confirm. After verification, your email address will be marked as verified in the SES console, allowing you to send emails from this address. 4. Create Step 1 SF (Send Email Step) Go to the Step Functions service in the AWS Management Console. Click on Create state machine . Choose a Standard In the state machine definition, you can select option as shown in demo or copy this as json from here Name the state machine (e.g., SendEmailStateMachine ), review, and create it. Reference to the step function ASL - step1.json","title":"Step 1 - Getting started"},{"location":"step1/#step-function-workshop-step-1-creating-a-basic-workflow-to-send-email","text":"","title":"Step Function Workshop: Step 1 creating a basic workflow to send email."},{"location":"step1/#1-create-the-iam-role-with-permissions-and-trust-policy","text":"Navigate to the IAM service in the AWS Management Console. Click on Roles in the left-hand menu, then click Create role . Add a custom trust policy that allows Lambda to assume this role add it from here Add a role from copy from here Name the role (e.g., LambdaSendEmailRole ) and finish creating the role.","title":"1. Create the IAM Role with Permissions and Trust Policy"},{"location":"step1/#1-create-the-send_email-lambda-function","text":"Open the AWS Management Console and navigate to the Lambda service. Click Create function and choose the Author from scratch option. Name the function send_email . Select a runtime, such as Python 3.12 . Under Permissions , create or choose an existing execution role that grants the Lambda function access to send emails (SES or a similar service). In the code editor, write a function that sends an email copy it from here . Click Deploy after writing the code.","title":"1. Create the send_email Lambda function"},{"location":"step1/#2-verify-email-in-amazon-ses","text":"Navigate to the Amazon SES service in the AWS Management Console. In the left-hand menu, select Email Addresses . Click Verify a New Email Address and enter the email address from which you'll be sending emails. Click Verify This Email Address . An email will be sent to that address. Open the email and click the verification link to confirm. After verification, your email address will be marked as verified in the SES console, allowing you to send emails from this address.","title":"2. Verify Email in Amazon SES"},{"location":"step1/#4-create-step-1-sf-send-email-step","text":"Go to the Step Functions service in the AWS Management Console. Click on Create state machine . Choose a Standard In the state machine definition, you can select option as shown in demo or copy this as json from here Name the state machine (e.g., SendEmailStateMachine ), review, and create it. Reference to the step function ASL - step1.json","title":"4. Create Step 1 SF (Send Email Step)"},{"location":"step2/","text":"Step 2: Fetch Subscribers and Send Email 1. Create the DynamoDB Table newsletter-subs Navigate to the DynamoDB service in the AWS Management Console. Click Create Table . Set the Table name to newsletter-subs . Set the Primary key to email (String). Configure any additional settings as needed, then click Create table . 2. Create the fetch_subscribers Lambda function Navigate to the Lambda service in the AWS Management Console. Click Create function and choose the Author from scratch option. Name the function fetch_subscribers . Select a runtime, such as Python 3.12 *. In the code editor, copy the function from here to query the newsletter-subs DynamoDB table and return the list of subscribers. Under Permissions , use the IAM role created in Step 1 (with permissions to access DynamoDB). Click Deploy . 3. Create Step 2 SF (Fetch from DDB + Send Email) Go to the Step Functions service in the AWS Management Console. Click on Create state machine . In the state machine definition, add the following tasks as json Name the state machine (e.g., FetchAndSendStateMachine ), review, and create it. 4. Create the send_email_v2 Lambda function Navigate to the Lambda service in the AWS Management Console. Click Create function and choose the Author from scratch option. Name the function send_email_v2 . Select a runtime, such as Python 3.12 . In the code editor, copy the function from here Under Permissions , use the IAM role created in Step 1 (with permissions to send emails). Click Deploy . Note: The IAM role permission created in Step 1 can be reused for both the fetch_subscribers and send_email_v2 Lambda functions.","title":"Step 2 - Fetch Data from DynamoDB"},{"location":"step2/#step-2-fetch-subscribers-and-send-email","text":"","title":"Step 2: Fetch Subscribers and Send Email"},{"location":"step2/#1-create-the-dynamodb-table-newsletter-subs","text":"Navigate to the DynamoDB service in the AWS Management Console. Click Create Table . Set the Table name to newsletter-subs . Set the Primary key to email (String). Configure any additional settings as needed, then click Create table .","title":"1. Create the DynamoDB Table newsletter-subs"},{"location":"step2/#2-create-the-fetch_subscribers-lambda-function","text":"Navigate to the Lambda service in the AWS Management Console. Click Create function and choose the Author from scratch option. Name the function fetch_subscribers . Select a runtime, such as Python 3.12 *. In the code editor, copy the function from here to query the newsletter-subs DynamoDB table and return the list of subscribers. Under Permissions , use the IAM role created in Step 1 (with permissions to access DynamoDB). Click Deploy .","title":"2. Create the fetch_subscribers Lambda function"},{"location":"step2/#3-create-step-2-sf-fetch-from-ddb-send-email","text":"Go to the Step Functions service in the AWS Management Console. Click on Create state machine . In the state machine definition, add the following tasks as json Name the state machine (e.g., FetchAndSendStateMachine ), review, and create it.","title":"3. Create Step 2 SF (Fetch from DDB + Send Email)"},{"location":"step2/#4-create-the-send_email_v2-lambda-function","text":"Navigate to the Lambda service in the AWS Management Console. Click Create function and choose the Author from scratch option. Name the function send_email_v2 . Select a runtime, such as Python 3.12 . In the code editor, copy the function from here Under Permissions , use the IAM role created in Step 1 (with permissions to send emails). Click Deploy . Note: The IAM role permission created in Step 1 can be reused for both the fetch_subscribers and send_email_v2 Lambda functions.","title":"4. Create the send_email_v2 Lambda function"},{"location":"step3/","text":"Step 3: Direct Integration with DynamoDB and Send Email 1. Create Step 3 SF (Direct Integration with DynamoDB + Send Email) Go to the Step Functions service in the AWS Management Console. Click on Create state machine . In the state machine definition,add code from here as json Name the state machine (e.g., DDBDirectAndSendEmailStateMachine ), review, and create it. 2. Create the send_email_v3 Lambda function Navigate to the Lambda service in the AWS Management Console. Click Create function and choose the Author from scratch option. Name the function send_email_v3 . Select a runtime, such as Python 3.12 . In the code editor, you can copy the code from here Under Permissions , use the IAM role created in Step 1 (with permissions to send emails). Click Deploy . Note: The IAM role permission created in Step 1 can be reused for the send_email_v3 Lambda function as well.","title":"Step 3 - Intro to Direct Integrations"},{"location":"step3/#step-3-direct-integration-with-dynamodb-and-send-email","text":"","title":"Step 3: Direct Integration with DynamoDB and Send Email"},{"location":"step3/#1-create-step-3-sf-direct-integration-with-dynamodb-send-email","text":"Go to the Step Functions service in the AWS Management Console. Click on Create state machine . In the state machine definition,add code from here as json Name the state machine (e.g., DDBDirectAndSendEmailStateMachine ), review, and create it.","title":"1. Create Step 3 SF (Direct Integration with DynamoDB + Send Email)"},{"location":"step3/#2-create-the-send_email_v3-lambda-function","text":"Navigate to the Lambda service in the AWS Management Console. Click Create function and choose the Author from scratch option. Name the function send_email_v3 . Select a runtime, such as Python 3.12 . In the code editor, you can copy the code from here Under Permissions , use the IAM role created in Step 1 (with permissions to send emails). Click Deploy . Note: The IAM role permission created in Step 1 can be reused for the send_email_v3 Lambda function as well.","title":"2. Create the send_email_v3 Lambda function"},{"location":"step4/","text":"Now that we have our core setup ready, lets try to make it scalable. We will use the Map state in the Inline mode to loop through the email addresses fetched from DynamoDB. But before we proceed further, lets first create a new lambda function that can process individual emails. For this part of the workshop, please follow these steps: Step 1: Create V3 of the send_email lambda function Since we are going to leverage the Map state and iterate over the email addresses received from DynamoDB, we have to enhance the code to process individual email address instead of an array. Use the code in the here Step 2: Create the Step Function with the Map state Step Function code reference - step4.json","title":"Step 4 - Intro to Map State"},{"location":"step4/#step-1-create-v3-of-the-send_email-lambda-function","text":"Since we are going to leverage the Map state and iterate over the email addresses received from DynamoDB, we have to enhance the code to process individual email address instead of an array. Use the code in the here","title":"Step 1: Create V3 of the send_email lambda function"},{"location":"step4/#step-2-create-the-step-function-with-the-map-state","text":"Step Function code reference - step4.json","title":"Step 2: Create the Step Function with the Map state"},{"location":"step5/","text":"Callback Pattern Now let's add a manual step to get an approval from the admin before the email blast can be sent. We will leverage the callback pattern for the same. Please follow these steps for this part of the workshop: Step 1: Create send_approval_email lambda function Create a new lambda function to send the approval email to the admin. You can find the code for this here . This lambda function will send the original email with the subject, along with an approval and rejection link. Step 2: Create manage_notification_status lambda function This lambda function will be the listener and react to what happens when the admin approves or rejects. You can find the lambda function code here . This lambda function accepts the status and the task token passed via the function URL. Now, lets create a function URL Step 3: Create Function URL for manage_notification_status Create a function URL by navigating to the Configuration tab, Function URL section and clicking on the Create function URL button. For the Auth part, please select None and Save the details. This will create a publicly accessible URL for your lambda function. Keep it safe, we need to use it in the manage_notification_status lambda function Step 4: Update manage_notification_status lambda function Update the lambda function code and add the function URL created in the previous step Step 5: Create step5 step function Step Function code reference - step5.json","title":"Step 5 - Callback Pattern"},{"location":"step5/#callback-pattern","text":"Now let's add a manual step to get an approval from the admin before the email blast can be sent. We will leverage the callback pattern for the same. Please follow these steps for this part of the workshop:","title":"Callback Pattern"},{"location":"step5/#step-1-create-send_approval_email-lambda-function","text":"Create a new lambda function to send the approval email to the admin. You can find the code for this here . This lambda function will send the original email with the subject, along with an approval and rejection link.","title":"Step 1: Create send_approval_email lambda function"},{"location":"step5/#step-2-create-manage_notification_status-lambda-function","text":"This lambda function will be the listener and react to what happens when the admin approves or rejects. You can find the lambda function code here . This lambda function accepts the status and the task token passed via the function URL. Now, lets create a function URL","title":"Step 2: Create manage_notification_status lambda function"},{"location":"step5/#step-3-create-function-url-for-manage_notification_status","text":"Create a function URL by navigating to the Configuration tab, Function URL section and clicking on the Create function URL button. For the Auth part, please select None and Save the details. This will create a publicly accessible URL for your lambda function. Keep it safe, we need to use it in the manage_notification_status lambda function","title":"Step 3: Create Function URL for manage_notification_status"},{"location":"step5/#step-4-update-manage_notification_status-lambda-function","text":"Update the lambda function code and add the function URL created in the previous step","title":"Step 4: Update manage_notification_status lambda function"},{"location":"step5/#step-5-create-step5-step-function","text":"Step Function code reference - step5.json","title":"Step 5: Create step5 step function"}]}