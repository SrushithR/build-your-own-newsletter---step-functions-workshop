{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Build your own Newsletter using Step Functions Workshop Execution Steps: In this hands-on workshop, participants will learn how to design, build, and manage a fully automated newsletter system using AWS Step Functions. By the end of the workshop, attendees will have the skills to create sophisticated workflows that can handle complex business logic, scale efficiently, and integrate directly with other AWS services. Outline: Introduction to AWS Step Functions Overview of AWS Step Functions and their importance in orchestrating microservices. Key concepts: states, transitions, and the state machine. Designing your first simple workflow. Understanding Standard vs. Express Workflows Input and Output Processing How to manage input and output data within your workflows. Using JSONPath to extract, transform, and pass data between states. Best practices for managing large payloads and ensuring data integrity. Direct Integration with AWS Services Learn how to leverage Step Functions' direct integration with AWS services, focusing on sending emails via Amazon Simple Email Service (SES). Explore different ways to trigger email notifications within your workflow. Scaling with the Map State Leveraging the Map state to process large datasets in parallel. Real-world scenarios where the Map state can optimize your workflows. Hands-on example: processing and sending personalized emails to a large subscriber list. Implementing the Callback Pattern Using the callback pattern to pause and resume workflows. Handling asynchronous tasks by integrating with external systems or human intervention. Hands-on example: introducing manual approval step in the newsletter workflow. Mastering Built-in Retry Mechanisms Understanding AWS Step Functions' built-in retry and error handling capabilities. Designing robust workflows that can handle failures gracefully. Practical examples to demonstrate retry logic and error handling. [Bonus] Scheduling Notifications with EventBridge Integrating EventBridge with Step Functions to schedule and automate your newsletter sends. Setting up cron jobs and event rules to trigger workflows at specific times. Best practices for managing scheduled events and ensuring timely delivery. Prerequisites: Basic understanding of AWS services (IAM, S3, Lambda, SES). Familiarity with JSON and the AWS Management Console. AWS account with permissions to use Step Functions, EventBridge, SES, and Lambda.","title":"Home"},{"location":"#build-your-own-newsletter-using-step-functions","text":"","title":"Build your own Newsletter using Step Functions"},{"location":"#workshop-execution-steps","text":"In this hands-on workshop, participants will learn how to design, build, and manage a fully automated newsletter system using AWS Step Functions. By the end of the workshop, attendees will have the skills to create sophisticated workflows that can handle complex business logic, scale efficiently, and integrate directly with other AWS services.","title":"Workshop Execution Steps:"},{"location":"#outline","text":"","title":"Outline:"},{"location":"#introduction-to-aws-step-functions","text":"Overview of AWS Step Functions and their importance in orchestrating microservices. Key concepts: states, transitions, and the state machine. Designing your first simple workflow. Understanding Standard vs. Express Workflows","title":"Introduction to AWS Step Functions"},{"location":"#input-and-output-processing","text":"How to manage input and output data within your workflows. Using JSONPath to extract, transform, and pass data between states. Best practices for managing large payloads and ensuring data integrity.","title":"Input and Output Processing"},{"location":"#direct-integration-with-aws-services","text":"Learn how to leverage Step Functions' direct integration with AWS services, focusing on sending emails via Amazon Simple Email Service (SES). Explore different ways to trigger email notifications within your workflow.","title":"Direct Integration with AWS Services"},{"location":"#scaling-with-the-map-state","text":"Leveraging the Map state to process large datasets in parallel. Real-world scenarios where the Map state can optimize your workflows. Hands-on example: processing and sending personalized emails to a large subscriber list.","title":"Scaling with the Map State"},{"location":"#implementing-the-callback-pattern","text":"Using the callback pattern to pause and resume workflows. Handling asynchronous tasks by integrating with external systems or human intervention. Hands-on example: introducing manual approval step in the newsletter workflow.","title":"Implementing the Callback Pattern"},{"location":"#mastering-built-in-retry-mechanisms","text":"Understanding AWS Step Functions' built-in retry and error handling capabilities. Designing robust workflows that can handle failures gracefully. Practical examples to demonstrate retry logic and error handling.","title":"Mastering Built-in Retry Mechanisms"},{"location":"#bonus-scheduling-notifications-with-eventbridge","text":"Integrating EventBridge with Step Functions to schedule and automate your newsletter sends. Setting up cron jobs and event rules to trigger workflows at specific times. Best practices for managing scheduled events and ensuring timely delivery. Prerequisites: Basic understanding of AWS services (IAM, S3, Lambda, SES). Familiarity with JSON and the AWS Management Console. AWS account with permissions to use Step Functions, EventBridge, SES, and Lambda.","title":"[Bonus] Scheduling Notifications with EventBridge"},{"location":"io/","text":"Understanding Input and Output Processing in AWS Step Functions In AWS Step Functions, managing the flow of data between states is critical to ensure each task (or step) receives and returns the correct information. AWS provides various features to manipulate the data flow: - InputPath - Parameters - ResultSelector - ResultPath - OutputPath This workshop will walk you through these concepts and explain how they work in real-world scenarios. For a more detailed guide, refer to the official AWS documentation on data flow in Step Functions: AWS Step Functions Data Flow Simulator . 1. InputPath \u2013 What input does a task need? Definition: The InputPath field specifies which part of the input to pass to the task. If your input payload is complex or contains unnecessary information, you can use InputPath to extract only the relevant portion that the task needs. Example: Consider the following input payload: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" } } If you want to pass only the pizzaOrder section to the next state, you would use: \"InputPath\": \"$.pizzaOrder\" This results in the following input to the next task: { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" } 2. Parameters \u2013 How does the task need the structure of the input to be? Definition: The Parameters field allows you to specify how the input should look before it is passed to the task. You can use this to build a custom structure for your input, combining dynamic values (from the input or workflow context) with static values. Example: Let\u2019s say you need to pass only the pizza type and size, and you want to add a static orderID field. You can define the input structure using Parameters: \"Parameters\": { \"PizzaType.$\": \"$.pizzaType\", \"Size.$\": \"$.size\", \"OrderID\": \"12345ABC\" // Static value } This transforms the input to: { \"PizzaType\": \"Margherita\", \"Size\": \"Large\", \"OrderID\": \"12345ABC\" } 3. ResultSelector \u2013 What to choose from the task\u2019s output? Definition: The ResultSelector field allows you to select specific values from the output of a task. You can create a new output by defining a set of key-value pairs based on the task\u2019s result. Example: If a task returns the following result after calculating the price: { \"pizzaType\": \"Margherita\", \"priceDetails\": { \"basePrice\": 12.00, \"toppingsPrice\": 3.00, \"totalPrice\": 15.00 } } You can use ResultSelector to extract only the totalPrice and pizzaType: \"ResultSelector\": { \"TotalPrice.$\": \"$.priceDetails.totalPrice\", \"PizzaType.$\": \"$.pizzaType\" } This creates the following output: { \"TotalPrice\": 15.00, \"PizzaType\": \"Margherita\" } 4. ResultPath \u2013 Where to put the chosen output? Definition: The ResultPath field specifies where the task\u2019s output should be placed in the original input. You can either merge the task\u2019s output with the input or replace the input entirely. Example: Consider the following input before invoking a task: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\" } } The task returns the following output: { \"totalPrice\": 15.00 } Using ResultPath, you can merge the task result into the original input: \"ResultPath\": \"$.pizzaOrder.price\" The final output becomes: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } } 5. OutputPath \u2013 What output to send to the next state? Definition: The OutputPath field allows you to filter the final output before passing it to the next state. This helps in removing unnecessary data and sending only the relevant information to the next state. Example: Let\u2019s say the current state produces the following output: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } } If you want to pass only the totalPrice to the next state, you can use: \"OutputPath\": \"$.pizzaOrder.price.totalPrice\" This results in the following output: 15.00","title":"Understanding Input & Output Processing"},{"location":"io/#understanding-input-and-output-processing-in-aws-step-functions","text":"In AWS Step Functions, managing the flow of data between states is critical to ensure each task (or step) receives and returns the correct information. AWS provides various features to manipulate the data flow: - InputPath - Parameters - ResultSelector - ResultPath - OutputPath This workshop will walk you through these concepts and explain how they work in real-world scenarios. For a more detailed guide, refer to the official AWS documentation on data flow in Step Functions: AWS Step Functions Data Flow Simulator .","title":"Understanding Input and Output Processing in AWS Step Functions"},{"location":"io/#1-inputpath-what-input-does-a-task-need","text":"Definition: The InputPath field specifies which part of the input to pass to the task. If your input payload is complex or contains unnecessary information, you can use InputPath to extract only the relevant portion that the task needs. Example: Consider the following input payload: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" } } If you want to pass only the pizzaOrder section to the next state, you would use: \"InputPath\": \"$.pizzaOrder\" This results in the following input to the next task: { \"pizzaType\": \"Margherita\", \"toppings\": [\"Mushrooms\", \"Olives\"], \"size\": \"Large\" }","title":"1. InputPath \u2013 What input does a task need?"},{"location":"io/#2-parameters-how-does-the-task-need-the-structure-of-the-input-to-be","text":"Definition: The Parameters field allows you to specify how the input should look before it is passed to the task. You can use this to build a custom structure for your input, combining dynamic values (from the input or workflow context) with static values. Example: Let\u2019s say you need to pass only the pizza type and size, and you want to add a static orderID field. You can define the input structure using Parameters: \"Parameters\": { \"PizzaType.$\": \"$.pizzaType\", \"Size.$\": \"$.size\", \"OrderID\": \"12345ABC\" // Static value } This transforms the input to: { \"PizzaType\": \"Margherita\", \"Size\": \"Large\", \"OrderID\": \"12345ABC\" }","title":"2. Parameters \u2013 How does the task need the structure of the input to be?"},{"location":"io/#3-resultselector-what-to-choose-from-the-tasks-output","text":"Definition: The ResultSelector field allows you to select specific values from the output of a task. You can create a new output by defining a set of key-value pairs based on the task\u2019s result. Example: If a task returns the following result after calculating the price: { \"pizzaType\": \"Margherita\", \"priceDetails\": { \"basePrice\": 12.00, \"toppingsPrice\": 3.00, \"totalPrice\": 15.00 } } You can use ResultSelector to extract only the totalPrice and pizzaType: \"ResultSelector\": { \"TotalPrice.$\": \"$.priceDetails.totalPrice\", \"PizzaType.$\": \"$.pizzaType\" } This creates the following output: { \"TotalPrice\": 15.00, \"PizzaType\": \"Margherita\" }","title":"3. ResultSelector \u2013 What to choose from the task\u2019s output?"},{"location":"io/#4-resultpath-where-to-put-the-chosen-output","text":"Definition: The ResultPath field specifies where the task\u2019s output should be placed in the original input. You can either merge the task\u2019s output with the input or replace the input entirely. Example: Consider the following input before invoking a task: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\" } } The task returns the following output: { \"totalPrice\": 15.00 } Using ResultPath, you can merge the task result into the original input: \"ResultPath\": \"$.pizzaOrder.price\" The final output becomes: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } }","title":"4. ResultPath \u2013 Where to put the chosen output?"},{"location":"io/#5-outputpath-what-output-to-send-to-the-next-state","text":"Definition: The OutputPath field allows you to filter the final output before passing it to the next state. This helps in removing unnecessary data and sending only the relevant information to the next state. Example: Let\u2019s say the current state produces the following output: { \"customer\": { \"name\": \"Alice\", \"address\": \"123 Pizza St\" }, \"pizzaOrder\": { \"pizzaType\": \"Margherita\", \"size\": \"Large\", \"price\": { \"totalPrice\": 15.00 } } } If you want to pass only the totalPrice to the next state, you can use: \"OutputPath\": \"$.pizzaOrder.price.totalPrice\" This results in the following output: 15.00","title":"5. OutputPath \u2013 What output to send to the next state?"},{"location":"sample-input/","text":"Sample Input Here is a sample input that you can use to test your Step Function's execution { \"subject\": \"Step into the Future of Serverless Automation!\", \"content\": \"<html><head><style>body {font-family: Arial, sans-serif;}h1 {text-align: center;}p {text-align: justify;}</style></head><body><h1>Welcome to the AWS Step Functions Workshop!</h1><p>We're thrilled to have you join us for this exciting workshop on AWS Step Functions. Together, we'll explore the power of serverless workflows and learn how to automate complex tasks with ease.</p><p>Throughout the workshop, you'll gain the skills to:</p><ul><li>Design and implement efficient Step Functions workflows.</li><li>Orchestrate various AWS services seamlessly.</li><li>Master input and output processing for smooth data flow.</li><li>Discover best practices for building and monitoring workflows.</li></ul><p>To enhance your learning experience, we've prepared a GitHub repository containing all the code samples you'll need:</p><p><a href='https://github.com/SrushithR/build-your-own-newsletter-step-functions-workshop'>Build Your Own Newsletter Step Functions Workshop</a></p><p>Feel free to clone or download the repository before the workshop begins. We're excited to dive into the practical applications of Step Functions together!</p><p>We look forward to a productive and engaging workshop! Don't hesitate to ask questions and share your ideas.</p><p>Best regards,</p><p>The AWS Step Functions Workshop Team</p></body></html>\" }","title":"Sample Input"},{"location":"sample-input/#sample-input","text":"Here is a sample input that you can use to test your Step Function's execution { \"subject\": \"Step into the Future of Serverless Automation!\", \"content\": \"<html><head><style>body {font-family: Arial, sans-serif;}h1 {text-align: center;}p {text-align: justify;}</style></head><body><h1>Welcome to the AWS Step Functions Workshop!</h1><p>We're thrilled to have you join us for this exciting workshop on AWS Step Functions. Together, we'll explore the power of serverless workflows and learn how to automate complex tasks with ease.</p><p>Throughout the workshop, you'll gain the skills to:</p><ul><li>Design and implement efficient Step Functions workflows.</li><li>Orchestrate various AWS services seamlessly.</li><li>Master input and output processing for smooth data flow.</li><li>Discover best practices for building and monitoring workflows.</li></ul><p>To enhance your learning experience, we've prepared a GitHub repository containing all the code samples you'll need:</p><p><a href='https://github.com/SrushithR/build-your-own-newsletter-step-functions-workshop'>Build Your Own Newsletter Step Functions Workshop</a></p><p>Feel free to clone or download the repository before the workshop begins. We're excited to dive into the practical applications of Step Functions together!</p><p>We look forward to a productive and engaging workshop! Don't hesitate to ask questions and share your ideas.</p><p>Best regards,</p><p>The AWS Step Functions Workshop Team</p></body></html>\" }","title":"Sample Input"},{"location":"schedule/","text":"","title":"Scheduling Your Step Function"},{"location":"step1/","text":"Step Function code reference - step1.json","title":"Step 1 - Getting started"},{"location":"step2/","text":"Step Function code reference - step2.json","title":"Step 2 - Fetch Data from DynamoDB"},{"location":"step3/","text":"Step Function code reference - step3.json","title":"Step 3 - Intro to Direct Integrations"},{"location":"step4/","text":"Step Function code reference - step4.json","title":"Step 4 - Intro to Map State"},{"location":"step5/","text":"Step Function code reference - step5.json","title":"Step 5 - Call Back Pattern"}]}